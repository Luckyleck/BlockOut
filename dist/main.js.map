{"version":3,"file":"main.js","mappings":"qCAAA,MAAMA,EACJC,YAAc,GAEdC,YAAYC,EAAKC,GACfC,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,EACXC,KAAKC,KAAON,EAAKM,KACjBD,KAAKE,OAAS,EACdF,KAAKG,SAAU,EACfH,KAAKI,UAAW,CAClB,EAGF,QCbA,MAAMC,EACFT,YAAc,GAEdC,YAAYC,EAAIC,GACZC,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,EACXC,KAAKC,KAAOI,EAASJ,KACrBD,KAAKI,UAAW,CACpB,EAGJ,QCPA,MACME,EADSC,SAASC,eAAe,UACtBC,WAAW,MAEtBC,EAAc,IAAIC,MACxBD,EAAYE,IAAM,wCAClB,MAAMC,EAAa,IAAIF,MACvBE,EAAWD,IAAM,uCACjB,MAAME,EAAa,IAAIH,MACvBG,EAAWF,IAAM,uCAsOjB,MApOA,MAEIf,YAAYkB,EAAGC,GACXhB,KAAKe,EAAIA,EACTf,KAAKgB,EAAIA,EACThB,KAAKiB,GACLjB,KAAKkB,GACLlB,KAAKmB,OAAS,GACdnB,KAAKF,IAAMsB,KAAKC,OAAOrB,KAAKgB,EAAIM,EAAMC,iBAAmB5B,EAAKM,KAAO,GACrED,KAAKD,IAAMqB,KAAKC,OAAOrB,KAAKe,EAAIO,EAAME,iBAAmB7B,EAAKM,KAAO,GACrED,KAAKyB,aAAezB,KAAK0B,gBACzB1B,KAAK2B,OAAQ,EACb3B,KAAK4B,SAAU,EACf5B,KAAK6B,UAAY,QACjB7B,KAAK8B,MACL9B,KAAK+B,QAAU,GAEfC,OAAOC,iBAAiB,WAAWC,IAAa,IAAZ,IAAEC,GAAKD,EACvC,IAAIE,EACAC,EACJ,OAAQF,GACJ,IAAK,IAEDnC,KAAK+B,QAAU,IACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAGf,KAAKgB,EAAI,IAC9CoB,EAAUpC,KAAK0B,gBACX1B,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,MAA6B,IAAtBqB,EAASjC,WAC7CgC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAKgB,GAAK,GACVhB,KAAK6B,UAAY,MAEjB7B,KAAK2B,OAAS3B,KAAKwC,WACnBxC,KAAK2B,OAAQ,GAEjB,MACJ,IAAK,IAED3B,KAAK+B,QAAU,IACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAI,GAAIf,KAAKgB,GAE3ChB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,KAA4B,IAAtBqB,EAASjC,WAC7CgC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAKe,GAAK,GACVf,KAAK6B,UAAY,QAEjB7B,KAAK2B,OAAS3B,KAAKwC,WACrBxC,KAAK2B,OAAQ,GAEf,MACJ,IAAK,IAED3B,KAAK+B,QAAU,IACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAGf,KAAKgB,EAAI,IAC1ChB,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,MAA6B,IAAtBqB,EAASjC,WAC7CgC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAKgB,GAAK,GACVhB,KAAK6B,UAAY,QAEjB7B,KAAK2B,OAAS3B,KAAKwC,WACrBxC,KAAK2B,OAAQ,GAEf,MACJ,IAAK,IAED3B,KAAK+B,QAAU,IACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAI,GAAIf,KAAKgB,GAC3ChB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,KAA4B,IAAtBqB,EAASjC,WAC7CgC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAKe,GAAK,GACVf,KAAK6B,UAAY,SAEjB7B,KAAK2B,OAAS3B,KAAKwC,WACrBxC,KAAK2B,OAAQ,GAEf,MACJ,IAAK,IACD,OAAQ3B,KAAK+B,SACX,IAAK,IACK/B,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,KAC7BhB,KAAKyC,UAAUzC,KAAKe,EAAGf,KAAKgB,EAAI,IAExC,MACF,IAAK,IACKhB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,IAChChB,KAAKyC,UAAUzC,KAAKe,EAAI,GAAIf,KAAKgB,GAEvC,MACF,IAAK,IACKhB,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,KAC/BhB,KAAKyC,UAAUzC,KAAKe,EAAGf,KAAKgB,EAAI,IAEtC,MACF,IAAK,IACKhB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,IAChChB,KAAKyC,UAAUzC,KAAKe,EAAI,GAAIf,KAAKgB,IAKnD,GAER,CAEA0B,OACI1C,KAAK2C,YACLrC,EAAEsC,UAAU5C,KAAK8B,MAAO9B,KAAKe,EAAI,GAAIf,KAAKgB,EAAI,GAAI,GAAI,GAC1D,CAEA6B,cAII,MAAO,CAHGzB,KAAKC,OAAOrB,KAAKgB,EAAIM,EAAMC,iBAAmB5B,EAAKM,KAAO,GAC1DmB,KAAKC,OAAOrB,KAAKe,EAAIO,EAAME,iBAAmB7B,EAAKM,KAAO,GAGxE,CAEAyB,gBACI,IAAI5B,EAAOE,KAAK6C,cAAc,GAC1B9C,EAAMC,KAAK6C,cAAc,GAC7B,OAAOvB,GAAOwB,IAAIhD,GAAKC,EAC3B,CAEAgD,WAAWjD,EAAKC,GACZ,OAAOuB,EAAMwB,IAAIhD,GAAKC,EAC1B,CAEAuC,aAAavB,EAAGC,GACZ,IAAIgC,EAAOhD,KAAKiD,UAAUlC,EAAEC,GACxBlB,EAAMkD,EAAK,GACXjD,EAAMiD,EAAK,GAEf,OAAO1B,EAAMwB,IAAIhD,GAAKC,EAC1B,CAKA0C,UAAU1B,EAAGC,GACT,IAAIkC,EAAMlD,KAAKiD,UAAUlC,EAAGC,GACxBlB,EAAMoD,EAAI,GACVnD,EAAMmD,EAAI,GAEVF,EAAOhD,KAAK+C,WAAWjD,EAAKC,GAC5BiD,EAAK9C,OAAS,IACd8C,EAAK9C,QAAU,EACK,IAAhB8C,EAAK9C,SACL8C,EAAK7C,SAAU,EACX6C,EAAK5C,WACLJ,KAAK4B,SAAU,IAK/B,CAIAW,OAAOxB,EAAGC,GACN,IAAIgC,EAAOhD,KAAKiD,UAAUlC,EAAGC,GACzBlB,EAAMkD,EAAK,GACXjD,EAAMiD,EAAK,GAEf,OAAI1B,EAAMwB,IAAIhD,GAAKC,aAAgBJ,CAKvC,CAEAsD,UAAUlC,EAAGC,GAIX,MAAO,CAHGI,KAAKC,OAAOL,EAAIM,EAAMC,iBAAmB5B,EAAKM,KAAO,GACrDmB,KAAKC,OAAON,EAAIO,EAAME,iBAAmB7B,EAAKM,KAAO,GAGjE,CAEAuC,SAGwB,IAFTxC,KAAK0B,gBAEPxB,OACLF,KAAK2B,OAAQ,EAEb3B,KAAK2B,OAAQ,CAErB,CAEAwB,QACInD,KAAKe,OAAIqC,EACTpD,KAAKgB,OAAIoC,EACTpD,KAAKiB,QAAKmC,EACVpD,KAAKkB,QAAKkC,EACVpD,KAAKmB,YAASiC,EACdpD,KAAKF,SAAMsD,EACXpD,KAAKD,SAAMqD,EACXpD,KAAKyB,kBAAe2B,EACpBpD,KAAK2B,WAAQyB,EACbpD,KAAK4B,aAAUwB,EACfpD,KAAKqD,aAAUD,CACnB,CAEAT,YAE2B,UAAnB3C,KAAK6B,UACL7B,KAAK8B,MAAQpB,EACa,SAAnBV,KAAK6B,UACZ7B,KAAK8B,MAAQjB,EACa,SAAnBb,KAAK6B,UACZ7B,KAAK8B,MAAQhB,EAEbd,KAAK8B,MAAQpB,CAErB,CAEA4C,gBACwBtD,KAAK0B,0BACErB,IACvBL,KAAK2B,OAAQ,EAErB,GC1OJ,MAAM4B,EAAShD,SAASC,eAAe,UACjCF,EAAIiD,EAAO9C,WAAW,MAEtB+C,EAAY,IAAI7C,MACtB6C,EAAU5C,IAAM,2BAEhB,MAAM6C,EAAQ,IAAI9C,MAClB8C,EAAM7C,IAAM,gCAEZ,MAAM8C,EAAY,IAAI/C,MACtB+C,EAAU9C,IAAM,gCAEhB,MAAM+C,EAAW,IAAIhD,MACrBgD,EAAS/C,IAAM,+BAIf,MAAMU,EAGJ1B,WAAa,CACX,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAG9EA,aAAe,EACfA,kBAAoB,KACpBA,qBAAuB,EACvBA,iBAAkB,EAElBA,qBAAuB2D,EAAOK,MAAQ,EACtChE,qBAAuB2D,EAAOM,OAAS,EAGvCjE,gBAAkB0B,EAAMwB,IAAI,GAAGgB,OAASnE,EAAKM,KAC7CL,iBAAmB0B,EAAMwB,IAAIgB,OAASnE,EAAKM,KAG3CL,kBAAoB0B,EAAMyC,cAAgB,EAAI,EAAI,GAClDnE,kBAAoB0B,EAAM0C,cAAgB,EAG1CpE,qBAAwB0B,EAAMwB,IAAI,GAAGgB,OAASnE,EAAKM,KAAqB,EAAZN,EAAKM,KACjEL,qBAAwB0B,EAAMwB,IAAIgB,OAASnE,EAAKM,KAAqB,EAAZN,EAAKM,KAG9DL,sBAAwB0B,EAAM2C,SAAuB,EAAZtE,EAAKM,KAC9CL,uBAAyB0B,EAAM4C,UAAwB,EAAZvE,EAAKM,KAGhDL,uBAAyB0B,EAAM6C,WAAaxE,EAAKM,KACjDL,uBAAyB0B,EAAM8C,WAAazE,EAAKM,KAEjDJ,cAEE,IAAK,IAAIwE,EAAI,EAAGA,EAAI/C,EAAMwB,IAAIgB,OAAQO,IACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIhD,EAAMwB,IAAIuB,GAAGP,OAAQQ,IACf,MAApBhD,EAAMwB,IAAIuB,GAAGC,GACfhD,EAAMwB,IAAIuB,GAAGC,GAAK,IAAI3E,EACpB0E,EACAC,GAGFhD,EAAMwB,IAAIuB,GAAGC,GAAK,IAAIjE,EACpBgE,EACAC,EAKV,CAEA5B,OACE,MAAM6B,EAASjD,EAAM6C,WACfK,EAASlD,EAAM8C,WAErB9C,EAAMwB,IAAI2B,SAAS3E,IAEjBA,EAAI2E,SAASzB,IAGPA,aAAgBrD,GAAwB,IAAhBqD,EAAK9C,QAC/BI,EAAEoE,WAAa,GACfpE,EAAEqE,YAAc,QAChBrE,EAAEsC,UAAUY,EAAWe,EAAUvB,EAAKjD,IAAMiD,EAAK/C,KAAOuE,EAAUxB,EAAKlD,IAAMkD,EAAK/C,KAAO+C,EAAK/C,KAAM+C,EAAK/C,OAChG+C,aAAgBrD,GAAwB,IAAhBqD,EAAK9C,QACtCI,EAAEoE,WAAa,GACfpE,EAAEqE,YAAc,QAChBrE,EAAEsC,UAAUc,EAAWa,EAAUvB,EAAKjD,IAAMiD,EAAK/C,KAAOuE,EAAUxB,EAAKlD,IAAMkD,EAAK/C,KAAO+C,EAAK/C,KAAM+C,EAAK/C,OAChG+C,aAAgBrD,GAAwB,IAAhBqD,EAAK9C,QACtCI,EAAEoE,WAAa,GACfpE,EAAEqE,YAAc,QAChBrE,EAAEsC,UAAUe,EAAUY,EAAUvB,EAAKjD,IAAMiD,EAAK/C,KAAOuE,EAAUxB,EAAKlD,IAAMkD,EAAK/C,KAAO+C,EAAK/C,KAAM+C,EAAK/C,OAC/F+C,aAAgBrD,GAAwB,IAAhBqD,EAAK9C,QACtCI,EAAEsE,YAAc,EAChBtE,EAAEuE,UAAY,UACdvE,EAAEwE,SAASP,EAAUvB,EAAKjD,IAAMiD,EAAK/C,KAAOuE,EAAUxB,EAAKlD,IAAMkD,EAAK/C,KAAO+C,EAAK/C,KAAM+C,EAAK/C,MAC7FK,EAAEyE,UAAY,EACdzE,EAAE0E,YAAc,QAChB1E,EAAE2E,WAAWV,EAAUvB,EAAKjD,IAAMiD,EAAK/C,KAAOuE,EAAUxB,EAAKlD,IAAMkD,EAAK/C,KAAO+C,EAAK/C,KAAM+C,EAAK/C,MAC/FK,EAAEsE,YAAc,GACP5B,aAAgB3C,GACzBC,EAAEsC,UAAUa,EAAOc,EAAUvB,EAAKjD,IAAMiD,EAAK/C,KAAOuE,EAAUxB,EAAKlD,IAAMkD,EAAK/C,KAAO+C,EAAK/C,KAAM+C,EAAK/C,KACvG,GACA,GAkBN,CAEAL,yBAIE,GAFA0B,EAAM4D,gBAEF5D,EAAM4D,eAAiB,EAEzB,YADA5D,EAAM6D,UAAW,GAKnB7D,EAAMwB,IAAIsC,QAGV9D,EAAMwB,IAAIuC,MAGV,IAAK,IAAIvF,KAAOwB,EAAMwB,IACpBhD,EAAIsF,QAIN,IAAK,IAAItF,KAAOwB,EAAMwB,IACpBhD,EAAIuF,MAIN,IAAK,IAAItF,EAAM,EAAGA,EAAMuB,EAAMwB,IAAI,GAAGgB,OAAQ/D,IAC3CuB,EAAMwB,IAAI,GAAG/C,GAAO,IAAIM,EAAS,EAAGN,GAItC,IAAIuF,EAAUhE,EAAMwB,IAAIgB,OAAS,EACjC,IAAK,IAAI/D,EAAM,EAAGA,EAAMuB,EAAMwB,IAAIwC,GAASxB,OAAQ/D,IACjDuB,EAAMwB,IAAIwC,GAASvF,GAAO,IAAIM,EAASiF,EAASvF,GAIlD,IAAK,IAAID,EAAM,EAAGA,EAAMwB,EAAMwB,IAAIgB,OAAQhE,IACxCwB,EAAMwB,IAAIhD,GAAK,GAAK,IAAIO,EAASP,EAAK,GAIxC,IAAIyF,EAAUjE,EAAMwB,IAAI,GAAGgB,OAAS,EACpC,IAAK,IAAIhE,EAAM,EAAGA,EAAMwB,EAAMwB,IAAIgB,OAAQhE,IACxCwB,EAAMwB,IAAIhD,GAAKyF,GAAW,IAAIlF,EAASP,EAAKyF,GAI9C,IAAK,IAAIlB,EAAI,EAAGA,EAAI/C,EAAMwB,IAAIgB,OAAQO,IACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIhD,EAAMwB,IAAIuB,GAAGP,OAAQQ,IAAK,CAC5C,MAAMtB,EAAO1B,EAAMwB,IAAIuB,GAAGC,GACtBtB,aAAgBrD,IAClBqD,EAAKlD,IAAMuE,EACXrB,EAAKjD,IAAMuE,EAEf,CAGFhD,EAAM2C,SAAW3C,EAAMwB,IAAI,GAAGgB,OAASnE,EAAKM,KAC5CqB,EAAM4C,UAAY5C,EAAMwB,IAAIgB,OAASnE,EAAKM,KAE1CqB,EAAM6C,YAAc,GACpB7C,EAAM8C,YAAc,GAEpB9C,EAAMkE,eAAiB,GACvBlE,EAAMmE,eAAiB,GAEvBnE,EAAME,iBAAmB,GACzBF,EAAMC,iBAAmB,GAEzBmE,QAAQC,IAAIrE,EAAM6D,SAEpB,CAEAvF,oBACO0B,EAAMsE,aACTtE,EAAMsE,WAAaC,aAAY,KAC7BvE,EAAMwE,OAAS,EACXxE,EAAMwE,MAAQ,GAAM,GACtBxE,EAAMyE,iBACR,GACC,KAEP,CAEAnG,mBACM0B,EAAMsE,aACRI,cAAc1E,EAAMsE,YACpBtE,EAAMsE,WAAa,KAEvB,CAEAzC,QACE7B,EAAMwB,IAAM,CACV,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5E,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAG9ExB,EAAMwE,MAAQ,EACdxE,EAAM4D,cAAgB,EACtB5D,EAAM6D,UAAW,EAEjB7D,EAAMyC,cAAgBR,EAAOK,MAAQ,EACrCtC,EAAM0C,cAAgBT,EAAOM,OAAS,EAGtCvC,EAAM2C,SAAW3C,EAAMwB,IAAI,GAAGgB,OAASnE,EAAKM,KAC5CqB,EAAM4C,UAAY5C,EAAMwB,IAAIgB,OAASnE,EAAKM,KAG1CqB,EAAM6C,WAAa7C,EAAMyC,cAAgB,EAAI,EAAI,GACjDzC,EAAM8C,WAAa9C,EAAM0C,cAAgB,EAGzC1C,EAAMkE,cAAiBlE,EAAMwB,IAAI,GAAGgB,OAASnE,EAAKM,KAAqB,EAAZN,EAAKM,KAChEqB,EAAM2E,cAAiB3E,EAAMwB,IAAIgB,OAASnE,EAAKM,KAAqB,EAAZN,EAAKM,KAG7DqB,EAAM4E,eAAiB5E,EAAM2C,SAAuB,EAAZtE,EAAKM,KAC7CqB,EAAM6E,gBAAkB7E,EAAM4C,UAAwB,EAAZvE,EAAKM,KAG/CqB,EAAME,gBAAkBF,EAAM6C,WAAaxE,EAAKM,KAChDqB,EAAMC,gBAAkBD,EAAM8C,WAAazE,EAAKM,IAGlD,EAGF,QCpRA,MACMK,EADSC,SAASC,eAAe,UACtBC,WAAW,MAEtBC,EAAc,IAAIC,MACxBD,EAAYE,IAAM,yCAClB,MAAMC,EAAa,IAAIF,MACvBE,EAAWD,IAAM,wCACjB,MAAME,EAAa,IAAIH,MACvBG,EAAWF,IAAM,wCAuOjB,MArOA,MACEf,YAAYkB,EAAGC,GACbhB,KAAKe,EAAIA,EACTf,KAAKgB,EAAIA,EACThB,KAAKiB,GACLjB,KAAKkB,GACLlB,KAAKmB,OAAS,GACdnB,KAAKF,IAAMsB,KAAKC,OAAOrB,KAAKgB,EAAIM,EAAMC,iBAAmB5B,EAAKM,KAAO,GACrED,KAAKD,IAAMqB,KAAKC,OAAOrB,KAAKe,EAAIO,EAAME,iBAAmB7B,EAAKM,KAAO,GACrED,KAAKyB,aAAezB,KAAK0B,gBACzB1B,KAAK2B,OAAQ,EACb3B,KAAK4B,SAAU,EACf5B,KAAK6B,UAAY,OACjB7B,KAAK8B,MACL9B,KAAK+B,QAAU,GAEfC,OAAOC,iBAAiB,WAAWC,IAAa,IAAZ,IAAEC,GAAKD,EAEzC,IAAIE,EACAC,EACJ,OAAQF,GACN,IAAK,UAEHnC,KAAK+B,QAAU,UACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAGf,KAAKgB,EAAI,IAC1ChB,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,MAA6B,IAAtBqB,EAASjC,WAC/CgC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAKgB,GAAK,GACVhB,KAAK6B,UAAY,MAEf7B,KAAK2B,OAAS3B,KAAKwC,WACrBxC,KAAK2B,OAAQ,GAEf,MACF,IAAK,YAEH3B,KAAK+B,QAAU,YACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAI,GAAIf,KAAKgB,GAC3ChB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,KAA4B,IAAtBqB,EAASjC,WAC/CgC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAKe,GAAK,GACVf,KAAK6B,UAAY,QAEf7B,KAAK2B,OAAS3B,KAAKwC,WACrBxC,KAAK2B,OAAQ,GAEf,MACF,IAAK,YAEH3B,KAAK+B,QAAU,YACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAGf,KAAKgB,EAAI,IAC1ChB,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,MAA6B,IAAtBqB,EAASjC,WAC/CgC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAKgB,GAAK,GACVhB,KAAK6B,UAAY,QAEf7B,KAAK2B,OAAS3B,KAAKwC,WACrBxC,KAAK2B,OAAQ,GAEf,MACF,IAAK,aAEH3B,KAAK+B,QAAU,aACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAI,GAAIf,KAAKgB,GAC3ChB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,KAA4B,IAAtBqB,EAASjC,WAC/CgC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAK6B,UAAY,QACjB7B,KAAKe,GAAK,IAERf,KAAK2B,OAAS3B,KAAKwC,WACrBxC,KAAK2B,OAAQ,GAEf,MACF,IAAK,QACH,OAAQ3B,KAAK+B,SACX,IAAK,UACC/B,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,KAC/BhB,KAAKyC,UAAUzC,KAAKe,EAAGf,KAAKgB,EAAI,IAElC,MACF,IAAK,YACChB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,IAChChB,KAAKyC,UAAUzC,KAAKe,EAAI,GAAIf,KAAKgB,GAEnC,MACF,IAAK,YACChB,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,KAC/BhB,KAAKyC,UAAUzC,KAAKe,EAAGf,KAAKgB,EAAI,IAElC,MACF,IAAK,aACChB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,IAChChB,KAAKyC,UAAUzC,KAAKe,EAAI,GAAIf,KAAKgB,GAIvC0E,QAAQC,IAAI,SAEhB,GAEJ,CAEAjD,OACE1C,KAAK2C,YACLrC,EAAEsC,UAAU5C,KAAK8B,MAAO9B,KAAKe,EAAI,GAAIf,KAAKgB,EAAI,GAAI,GAAI,GACxD,CAEA6B,cAIE,MAAO,CAHGzB,KAAKC,OAAOrB,KAAKgB,EAAIM,EAAMC,iBAAmB5B,EAAKM,KAAO,GAC1DmB,KAAKC,OAAOrB,KAAKe,EAAIO,EAAME,iBAAmB7B,EAAKM,KAAO,GAGtE,CAEAyB,gBACE,IAAI5B,EAAME,KAAK6C,cAAc,GACzB9C,EAAMC,KAAK6C,cAAc,GAG7B,OAAOvB,EAAMwB,IAAIhD,GAAKC,EACxB,CAEAgD,WAAWjD,EAAKC,GACd,OAAOuB,EAAMwB,IAAIhD,GAAKC,EACxB,CAEAuC,aAAavB,EAAGC,GACd,IAAIgC,EAAOhD,KAAKiD,UAAUlC,EAAGC,GACzBlB,EAAMkD,EAAK,GACXjD,EAAMiD,EAAK,GAEf,OAAO1B,EAAMwB,IAAIhD,GAAKC,EACxB,CAEA0C,UAAU1B,EAAGC,GACX,IAAIkC,EAAMlD,KAAKiD,UAAUlC,EAAGC,GACxBlB,EAAMoD,EAAI,GACVnD,EAAMmD,EAAI,GAEVF,EAAOhD,KAAK+C,WAAWjD,EAAKC,GAC5BiD,EAAK9C,OAAS,IAChB8C,EAAK9C,QAAU,EACK,IAAhB8C,EAAK9C,SACP8C,EAAK7C,SAAU,EACX6C,EAAK5C,WACPJ,KAAK4B,SAAU,IAIvB,CAIAW,OAAOxB,EAAGC,GACR,IAAIgC,EAAOhD,KAAKiD,UAAUlC,EAAGC,GACzBlB,EAAMkD,EAAK,GACXjD,EAAMiD,EAAK,GAEf,OAAI1B,EAAMwB,IAAIhD,GAAKC,aAAgBJ,CAKrC,CAEAsD,UAAUlC,EAAGC,GAIX,MAAO,CAHGI,KAAKC,OAAOL,EAAIM,EAAMC,iBAAmB5B,EAAKM,KAAO,GACrDmB,KAAKC,OAAON,EAAIO,EAAME,iBAAmB7B,EAAKM,KAAO,GAGjE,CAIAuC,SAIsB,IAHTxC,KAAK0B,gBAGPxB,OACPF,KAAK2B,OAAQ,EAEb3B,KAAK2B,OAAQ,CAEjB,CAEAwB,QACEnD,KAAKe,OAAIqC,EACTpD,KAAKgB,OAAIoC,EACTpD,KAAKiB,QAAKmC,EACVpD,KAAKkB,QAAKkC,EACVpD,KAAKmB,YAASiC,EACdpD,KAAKF,SAAMsD,EACXpD,KAAKD,SAAMqD,EACXpD,KAAKyB,kBAAe2B,EACpBpD,KAAK2B,WAAQyB,EACbpD,KAAK4B,aAAUwB,EACfpD,KAAKqD,aAAUD,CACjB,CAEAT,YAEyB,UAAnB3C,KAAK6B,UACP7B,KAAK8B,MAAQpB,EACe,SAAnBV,KAAK6B,UACd7B,KAAK8B,MAAQjB,EACe,SAAnBb,KAAK6B,UACd7B,KAAK8B,MAAQhB,EAEbd,KAAK8B,MAAQpB,CAGjB,CAEA4C,gBACsBtD,KAAK0B,0BACErB,IACzBL,KAAK2B,OAAQ,EAEjB,GC5OF,MACMrB,EADSC,SAASC,eAAe,UACtBC,WAAW,MAEtBC,EAAc,IAAIC,MACxBD,EAAYE,IAAM,2CAClB,MAAMC,EAAa,IAAIF,MACvBE,EAAWD,IAAM,0CACjB,MAAME,EAAa,IAAIH,MACvBG,EAAWF,IAAM,0CAkRjB,MAhRA,MACEf,YAAYkB,EAAGC,GACbhB,KAAKe,EAAIA,EACTf,KAAKgB,EAAIA,EACThB,KAAK2B,OAAQ,EACb3B,KAAKmB,OAAS,GACdnB,KAAKF,IAAMsB,KAAKC,OAAOrB,KAAKgB,EAAIM,EAAMC,iBAAmB5B,EAAKM,KAAO,GACrED,KAAKD,IAAMqB,KAAKC,OAAOrB,KAAKe,EAAIO,EAAME,iBAAmB7B,EAAKM,KAAO,GACrED,KAAK4B,SAAU,EACf5B,KAAKyB,aAAezB,KAAK0B,gBACzB1B,KAAK+B,QAAU,GACf/B,KAAKoG,SAAU,EACfpG,KAAKqG,UAAW,EAChBrG,KAAKsG,WAAa,EAClBtG,KAAK6B,UAAY,OACjB7B,KAAK8B,KACP,CAEAyE,eACEvG,KAAKwG,WACLxG,KAAKwG,WACLxG,KAAKyG,QACLzG,KAAKwG,UACP,CAEAA,WACE,IAAKxG,KAAKoG,QAAS,OAAO,EAE1B,MAAMM,EAAa,CAAC,QAAS,QAAS,OAAQ,QAG9C,IAAItE,EACAC,EACJ,OAHgBqE,EAAWtF,KAAKC,MAAMD,KAAKuF,SAAWD,EAAW5C,UAI/D,IAAK,QAEH9D,KAAK+B,QAAU,QACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAGf,KAAKgB,EAAI,IAE5ChB,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,MACP,IAAtBqB,EAASjC,UACTiC,EAASnC,OAAS,IAElBkC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAKgB,GAAK,GACVhB,KAAK6B,UAAY,MAEf7B,KAAK2B,OAAS3B,KAAKwC,WACrBxC,KAAK2B,OAAQ,GAEf,MACF,IAAK,OAEH3B,KAAK+B,QAAU,OACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAI,GAAIf,KAAKgB,GAE7ChB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,KACR,IAAtBqB,EAASjC,UACTiC,EAASnC,OAAS,IAElBkC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAKe,GAAK,GACVf,KAAK6B,UAAY,QAEf7B,KAAK2B,OAAS3B,KAAKwC,WACrBxC,KAAK2B,OAAQ,GAEf,MACF,IAAK,QAEH3B,KAAK+B,QAAU,QACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAGf,KAAKgB,EAAI,IAE5ChB,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,MACP,IAAtBqB,EAASjC,UACTiC,EAASnC,OAAS,IAElBkC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAKgB,GAAK,GACVhB,KAAK6B,UAAY,QAEf7B,KAAK2B,OAAS3B,KAAKwC,WACrBxC,KAAK2B,OAAQ,GAEf,MACF,IAAK,OAEH3B,KAAK+B,QAAU,OACfK,EAAUpC,KAAK0B,gBACfW,EAAWrC,KAAKsC,aAAatC,KAAKe,EAAI,GAAIf,KAAKgB,GAE7ChB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,KACR,IAAtBqB,EAASjC,UACTiC,EAASnC,OAAS,IAElBkC,EAAQhC,UAAW,EACnBiC,EAASjC,UAAW,EACpBJ,KAAKe,GAAK,GACVf,KAAK6B,UAAY,SAEf7B,KAAK2B,OAAS3B,KAAKwC,WACrBxC,KAAK2B,OAAQ,GAKnB3B,KAAKoG,SAAU,EACfQ,YAAW,IAAO5G,KAAKoG,SAAU,GAAO,IAC1C,CAEAK,QACE,IAAKzG,KAAKqG,SAAU,OAAO,EAC3B,OAAQrG,KAAK+B,SACX,IAAK,QAED/B,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,KAC7BhB,KAAKsC,aAAatC,KAAKe,EAAGf,KAAKgB,EAAI,IAAId,OAAS,GAEhDF,KAAKyC,UAAUzC,KAAKe,EAAGf,KAAKgB,EAAI,IAElC,MACF,IAAK,OAEDhB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,IAC9BhB,KAAKsC,aAAatC,KAAKe,EAAI,GAAIf,KAAKgB,GAAGd,OAAS,GAEhDF,KAAKyC,UAAUzC,KAAKe,EAAI,GAAIf,KAAKgB,GAEnC,MACF,IAAK,QAEDhB,KAAKuC,OAAOvC,KAAKe,EAAGf,KAAKgB,EAAI,KAC7BhB,KAAKsC,aAAatC,KAAKe,EAAGf,KAAKgB,EAAI,IAAId,OAAS,GAEhDF,KAAKyC,UAAUzC,KAAKe,EAAGf,KAAKgB,EAAI,IAElC,MACF,IAAK,OAEDhB,KAAKuC,OAAOvC,KAAKe,EAAI,GAAIf,KAAKgB,IAC9BhB,KAAKsC,aAAatC,KAAKe,EAAI,GAAIf,KAAKgB,GAAGd,OAAS,GAEhDF,KAAKyC,UAAUzC,KAAKe,EAAI,GAAIf,KAAKgB,GAIvChB,KAAKqG,UAAW,EAChBO,YAAW,IAAO5G,KAAKqG,UAAW,GAAO,IAC3C,CAEA3D,OACE1C,KAAK2C,YACLrC,EAAEsC,UAAU5C,KAAK8B,MAAO9B,KAAKe,EAAI,GAAIf,KAAKgB,EAAI,GAAI,GAAI,GACxD,CAEA6B,cAGE,MAAO,CAFGzB,KAAKC,OAAOrB,KAAKgB,EAAIM,EAAMC,iBAAmB5B,EAAKM,KAAO,GAC1DmB,KAAKC,OAAOrB,KAAKe,EAAIO,EAAME,iBAAmB7B,EAAKM,KAAO,GAEtE,CAEAyB,gBACE,IAAI5B,EAAME,KAAK6C,cAAc,GACzB9C,EAAMC,KAAK6C,cAAc,GAC7B,OAAOvB,EAAMwB,IAAIhD,GAAKC,EACxB,CAEAgD,WAAWjD,EAAKC,GACd,OAAOuB,EAAMwB,IAAIhD,GAAKC,EACxB,CAEAuC,aAAavB,EAAGC,GACd,IAAIgC,EAAOhD,KAAKiD,UAAUlC,EAAGC,GACzBlB,EAAMkD,EAAK,GACXjD,EAAMiD,EAAK,GAEf,OAAO1B,EAAMwB,IAAIhD,GAAKC,EACxB,CAIA0C,UAAU1B,EAAGC,GACX,IAAIkC,EAAMlD,KAAKiD,UAAUlC,EAAGC,GACxBlB,EAAMoD,EAAI,GACVnD,EAAMmD,EAAI,GAEVF,EAAOhD,KAAK+C,WAAWjD,EAAKC,GAC5BiD,EAAK9C,OAAS,IAChB8C,EAAK9C,QAAU,EACK,IAAhB8C,EAAK9C,SACP8C,EAAK7C,SAAU,EACX6C,EAAK5C,WACPJ,KAAK4B,SAAU,IAIvB,CAIAW,OAAOxB,EAAGC,GACR,IAAIgC,EAAOhD,KAAKiD,UAAUlC,EAAGC,GACzBlB,EAAMkD,EAAK,GACXjD,EAAMiD,EAAK,GAEf,OAAI1B,EAAMwB,IAAIhD,GAAKC,aAAgBJ,CAKrC,CAEAsD,UAAUlC,EAAGC,GAIX,MAAO,CAHGI,KAAKC,OAAOL,EAAIM,EAAMC,iBAAmB5B,EAAKM,KAAO,GACrDmB,KAAKC,OAAON,EAAIO,EAAME,iBAAmB7B,EAAKM,KAAO,GAGjE,CAIAuC,SAIsB,IAHTxC,KAAK0B,gBAGPxB,OACPF,KAAK2B,OAAQ,EAEb3B,KAAK2B,OAAQ,CAEjB,CAEAwB,QACEnD,KAAKe,OAAIqC,EACTpD,KAAKgB,OAAIoC,EACTpD,KAAKiB,QAAKmC,EACVpD,KAAKkB,QAAKkC,EACVpD,KAAKmB,YAASiC,EACdpD,KAAKF,SAAMsD,EACXpD,KAAKD,SAAMqD,EACXpD,KAAKyB,kBAAe2B,EACpBpD,KAAK2B,WAAQyB,EACbpD,KAAK4B,aAAUwB,EACfpD,KAAKqD,aAAUD,CACjB,CAEAT,YACyB,UAAnB3C,KAAK6B,UACP7B,KAAK8B,MAAQpB,EACe,SAAnBV,KAAK6B,UACd7B,KAAK8B,MAAQjB,EACe,SAAnBb,KAAK6B,UACd7B,KAAK8B,MAAQhB,EAEbd,KAAK8B,MAAQjB,CAEjB,CAEAyC,gBACsBtD,KAAK0B,0BACErB,IACzBL,KAAK2B,OAAQ,EAEjB,GCrRF,MAAM4B,EAAShD,SAASC,eAAe,UACjCF,EAAIiD,EAAO9C,WAAW,MAGtBoG,EAAiBtG,SAASC,eAAe,oBACzCsG,EAAavG,SAASC,eAAe,gBACrCuG,EAAYxG,SAASC,eAAe,cACpCwG,EAAazG,SAASC,eAAe,eAErCyG,EAAkB,IAClBC,EAAkB,IAClBC,EAAkB,IAClBC,EAAkB,IAClBC,EAAW,IACXC,EAAW,IAqBjB,IAAIC,EACAC,EACAC,EAEJ,SAASC,IACP,CAACX,EAAWC,EAAYH,EAAgBC,GAAYrC,SAAQkD,GAAMA,EAAGC,MAAMC,QAAU,QACvF,CAEA,SAASC,EAAQC,GAEbf,EAAWgB,UADC,QAAVD,EACsB,eAEA,GAAEA,UAE5Bf,EAAWY,MAAMC,QAAU,QAC3BhB,EAAee,MAAMC,QAAU,QAC/Bf,EAAWc,MAAMC,QAAU,QAC3Bd,EAAUa,MAAMC,QAAU,QAC1BvG,EAAM2G,WACR,CAEA,SAASC,EAAaC,EAASC,EAASX,GAEtCzF,OAAOqG,uBAAsB,KAC3B/H,EAAEgI,UAAU,EAAG,EAAG/E,EAAOK,MAAOL,EAAOM,QAEnCvC,EAAM6D,UAAYgD,EAAQxG,OAASyG,EAAQzG,OAC7C8F,EAAM/E,YACNoF,EAAQ,UAIVL,EAAM/E,OAENyF,EAAQ7E,gBACR8E,EAAQ9E,gBAER6E,EAAQxG,OAASwG,EAAQzF,OACzB0F,EAAQzG,OAASyG,EAAQ1F,OAEpByF,EAAQxG,OAAUyG,EAAQzG,MAK1BwG,EAAQxG,MAMRyG,EAAQzG,WAObuG,EAAaC,EAASC,EAASX,IAN7BU,EAAQzF,YACRoF,EAAQ,SAPRM,EAAQ1F,YACRoF,EAAQ,cANRA,EAAQ,WAmBd,CAEA,SAASS,IAEPd,GAASA,EAAMtE,QACfoE,GAAaA,EAAUpE,QACvBqE,GAAaA,EAAUrE,QAEvBsE,OAAQrE,EACRmE,OAAYnE,EACZoE,OAAYpE,EAEZqE,EAAQ,IAAInG,EACZiG,EAAY,IAAIiB,EAAOvB,EAAiBC,GACxCM,EAAY,IAAIiB,EAAUtB,EAAiBC,GAC3C9F,EAAMoH,aACNnB,EAAU9F,aAAarB,UAAW,EAClCoH,EAAU/F,aAAarB,UAAW,EAClCsF,QAAQC,IAAI4B,EAAWC,GAEvBU,EAAaX,EAAWC,EAAWC,EACrC,CAGA,SAASkB,EAAUR,EAASS,EAAInB,GAC9BzF,OAAOqG,uBAAsB,KAmB3B,GAlBA/H,EAAEgI,UAAU,EAAG,EAAG/E,EAAOK,MAAOL,EAAOM,QAEnCvC,EAAM6D,UAAYgD,EAAQxG,OAASiH,EAAGjH,QACxC8F,EAAM/E,OACNoF,EAAQ,SAGVL,EAAM/E,OAENyF,EAAQ7E,gBACRsF,EAAGtF,gBAEH6E,EAAQxG,OAASwG,EAAQzF,OACzBkG,EAAGjH,OAASiH,EAAGlG,OACfkG,EAAGpC,WACHoC,EAAGpC,WACHoC,EAAGnC,QAEE0B,EAAQxG,OAAUiH,EAAGjH,MAK1B,OAAKwG,EAAQxG,MAMRiH,EAAGjH,WAORgH,EAAUR,EAASS,EAAInB,IANrBU,EAAQzF,YACRoF,EAAQ,YAPRc,EAAGlG,YACHoF,EAAQ,UANRA,EAAQ,OAiBmB,GAEjC,CAEA,SAASe,IAEPpB,GAASA,EAAMtE,QACfoE,GAAaA,EAAUpE,QACvBqE,GAAaA,EAAUrE,QAEvBsE,OAAQrE,EACRmE,OAAYnE,EACZoE,OAAYpE,EAEZqE,EAAQ,IAAInG,EACZiG,EAAY,IAAIiB,EAAOvB,EAAiBC,GACxCM,EAAY,IAAIsB,EAAGzB,EAAUC,GAE7BhG,EAAMoH,aAENnB,EAAU9F,aAAarB,UAAW,EAClCoH,EAAU/F,aAAarB,UAAW,EAElCuI,EAAUpB,EAAWC,EAAWC,EAClC,CArKAV,EAAUa,MAAMC,QAAU,OAC1Bb,EAAWY,MAAMC,QAAU,OAE3BhB,EAAe5E,iBAAiB,SAAS,KACvCsG,IACAb,GAAc,IAGhBZ,EAAW7E,iBAAiB,SAAS,KACnC4G,IACAnB,GAAc,IAGhBX,EAAU9E,iBAAiB,SAAS,KAClCuF,aAAqBsB,EAAKD,IAAgBN,IAC1Cb,GAAc,IAwJhBhC,QAAQC,IAAIrE,EAAM2C,SAAU3C,EAAM4C,UAAW5C,EAAMkE,cAAelE,EAAM2E,eCzLxEP,QAAQC,IAAI,mB","sources":["webpack://spleef/./src/scripts/tile.js","webpack://spleef/./src/scripts/boundary.js","webpack://spleef/./src/scripts/player.js","webpack://spleef/./src/scripts/board.js","webpack://spleef/./src/scripts/playertwo.js","webpack://spleef/./src/scripts/ai.js","webpack://spleef/./src/scripts/game.js","webpack://spleef/./src/index.js"],"sourcesContent":["class Tile {\r\n  static size = 50;\r\n\r\n  constructor(row, col) {\r\n    this.row = row;\r\n    this.col = col;\r\n    this.size = Tile.size;\r\n    this.health = 3;\r\n    this.visible = true;\r\n    this.occupied = false;\r\n  }\r\n}\r\n\r\nexport default Tile;","class Boundary {\r\n    static size = 50;\r\n\r\n    constructor(row,col) {\r\n        this.row = row; \r\n        this.col = col\r\n        this.size = Boundary.size;\r\n        this.occupied = false;\r\n    }\r\n}\r\n\r\nexport default Boundary","import Board from \"./board.js\"\r\nimport Tile from \"./tile.js\"\r\nimport Boundary from \"./boundary.js\"\r\n\r\nconst canvas = document.getElementById('canvas')\r\nconst c = canvas.getContext('2d')\r\n\r\nconst shovelRight = new Image();\r\nshovelRight.src = './images/shovels/Shovel_Red_Right.png';\r\nconst shovelLeft = new Image();\r\nshovelLeft.src = \"./images/shovels/Shovel_Red_Left.png\";\r\nconst shovelDown = new Image();\r\nshovelDown.src = \"./images/shovels/Shovel_Red_Down.png\";\r\n\r\nclass Player {\r\n\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.dx;\r\n        this.dy;\r\n        this.radius = 15;\r\n        this.row = Math.floor((this.y - Board.playFieldStartY) / Tile.size + 1) // row is y\r\n        this.col = Math.floor((this.x - Board.playFieldStartX) / Tile.size + 1) // col is x\r\n        this.currentPlace = this.getPlayerTile();\r\n        this.alive = true;\r\n        this.victory = false;\r\n        this.direction = 'right'\r\n        this.image;\r\n        this.lastKey = ''\r\n\r\n        window.addEventListener('keydown', ({ key }) => {\r\n            var nowTile;\r\n            var nextTile;\r\n            switch (key) {\r\n                case 'w':\r\n                   \r\n                    this.lastKey = 'w'\r\n                    nowTile = this.getPlayerTile();\r\n                    nextTile = this.getAnyTileXY(this.x, this.y - 50);\r\n                    nowTile = this.getPlayerTile();\r\n                    if (this.isTile(this.x, this.y - 50) && nextTile.occupied === false) {\r\n                        nowTile.occupied = false\r\n                        nextTile.occupied = true\r\n                        this.y -= 50\r\n                        this.direction = 'up'\r\n                    }\r\n                    if (this.alive && this.isDead()) {\r\n                        this.alive = false\r\n                    }\r\n                    break\r\n                case 'a':\r\n                    \r\n                    this.lastKey = \"a\";\r\n                    nowTile = this.getPlayerTile();\r\n                    nextTile = this.getAnyTileXY(this.x - 50, this.y);\r\n                    \r\n                    if (this.isTile(this.x - 50, this.y) && nextTile.occupied === false) {\r\n                        nowTile.occupied = false;\r\n                        nextTile.occupied = true;\r\n                        this.x -= 50\r\n                        this.direction = \"left\";\r\n                    }\r\n                    if (this.alive && this.isDead()) {\r\n                      this.alive = false;\r\n                    }\r\n                    break\r\n                case 's':\r\n                   \r\n                    this.lastKey = \"s\";\r\n                    nowTile = this.getPlayerTile();\r\n                    nextTile = this.getAnyTileXY(this.x, this.y + 50);\r\n                    if (this.isTile(this.x, this.y + 50) && nextTile.occupied === false) {\r\n                        nowTile.occupied = false;\r\n                        nextTile.occupied = true;\r\n                        this.y += 50\r\n                        this.direction = \"down\";\r\n                    }\r\n                    if (this.alive && this.isDead()) {\r\n                      this.alive = false;\r\n                    }\r\n                    break\r\n                case 'd':\r\n                    \r\n                    this.lastKey = \"d\";\r\n                    nowTile = this.getPlayerTile();\r\n                    nextTile = this.getAnyTileXY(this.x + 50, this.y);\r\n                    if (this.isTile(this.x + 50, this.y) && nextTile.occupied === false) {\r\n                        nowTile.occupied = false;\r\n                        nextTile.occupied = true;\r\n                        this.x += 50\r\n                        this.direction = \"right\"\r\n                    }\r\n                    if (this.alive && this.isDead()) {\r\n                      this.alive = false;\r\n                    }\r\n                    break\r\n                case ' ':\r\n                    switch (this.lastKey) {\r\n                      case \"w\":\r\n                            if (this.isTile(this.x, this.y - 50)) {\r\n                                this.breakTile(this.x, this.y - 50)\r\n                            }\r\n                        break;\r\n                      case \"a\":\r\n                            if (this.isTile(this.x - 50, this.y)) {\r\n                              this.breakTile(this.x - 50, this.y);\r\n                            }\r\n                        break;\r\n                      case \"s\":\r\n                            if (this.isTile(this.x, this.y + 50)) {\r\n                              this.breakTile(this.x, this.y + 50);\r\n                            }\r\n                        break;\r\n                      case \"d\":\r\n                            if (this.isTile(this.x + 50, this.y)) {\r\n                              this.breakTile(this.x + 50, this.y);\r\n                            } \r\n                        break;\r\n                    }\r\n                    break\r\n            }\r\n        })\r\n    }\r\n\r\n    draw() { \r\n        this.pickImage();\r\n        c.drawImage(this.image, this.x - 20, this.y - 20, 40, 40)\r\n    }\r\n\r\n    currentTile() {\r\n        let row = Math.floor((this.y - Board.playFieldStartY) / Tile.size + 1) // row is y\r\n        let col = Math.floor((this.x - Board.playFieldStartX) / Tile.size + 1) // col is x\r\n        // console.log([row,col])\r\n        return [row, col]\r\n    }\r\n\r\n    getPlayerTile() {\r\n        let row =  this.currentTile()[0]\r\n        let col = this.currentTile()[1]\r\n        return Board?.map[row][col]\r\n    }\r\n\r\n    getAnyTile(row, col) {\r\n        return Board.map[row][col]\r\n    }\r\n\r\n    getAnyTileXY(x, y) {\r\n        let tile = this.xyConvert(x,y)\r\n        let row = tile[0]\r\n        let col = tile[1]\r\n\r\n        return Board.map[row][col] \r\n    }\r\n\r\n\r\n    // breakTiles\r\n\r\n    breakTile(x, y) {\r\n        let pos = this.xyConvert(x, y);\r\n        let row = pos[0];\r\n        let col = pos[1];\r\n\r\n        let tile = this.getAnyTile(row, col);\r\n        if (tile.health > 0) {\r\n            tile.health -= 1;\r\n            if (tile.health === 0) {\r\n                tile.visible = false;\r\n                if (tile.occupied) {\r\n                    this.victory = true // Checking if tile was occupied on last hit \r\n                }\r\n            }\r\n        }\r\n        // console.log(tile)\r\n    }\r\n\r\n    // Tile existence logic (use for boundary detection)\r\n\r\n    isTile(x, y) {\r\n        let tile = this.xyConvert(x, y)\r\n        let row = tile[0]\r\n        let col = tile[1]\r\n\r\n        if (Board.map[row][col] instanceof Tile) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    xyConvert(x, y) {\r\n      let row = Math.floor((y - Board.playFieldStartY) / Tile.size + 1); // row is y\r\n      let col = Math.floor((x - Board.playFieldStartX) / Tile.size + 1);\r\n\r\n      return [row, col]\r\n    }\r\n\r\n    isDead() {\r\n        let tile = this.getPlayerTile();\r\n   \r\n        if (tile.health === 0) {\r\n            this.alive = false\r\n        } else {\r\n            this.alive = true\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.x = undefined\r\n        this.y = undefined\r\n        this.dx = undefined\r\n        this.dy = undefined\r\n        this.radius = undefined;\r\n        this.row = undefined;\r\n        this.col = undefined;\r\n        this.currentPlace = undefined;\r\n        this.alive = undefined;\r\n        this.victory = undefined;\r\n        this.lastkey = undefined;\r\n    }\r\n\r\n    pickImage() {\r\n\r\n        if (this.direction === 'right') {\r\n            this.image = shovelRight;\r\n        } else if (this.direction === 'left') {\r\n            this.image = shovelLeft;\r\n        } else if (this.direction === 'down') {\r\n            this.image = shovelDown;\r\n        } else {\r\n            this.image = shovelRight;\r\n        }\r\n    }\r\n\r\n    checkBoundary() {\r\n        const currentTile = this.getPlayerTile();\r\n        if (currentTile instanceof Boundary) {\r\n            this.alive = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Player;\r\n","import Tile from './tile.js'\r\nimport Boundary from './boundary.js'\r\nimport Player from './player.js'\r\n// import grass from './img/grass.png'\r\n\r\nconst canvas = document.getElementById(\"canvas\");\r\nconst c = canvas.getContext(\"2d\")\r\n\r\nconst grassFull = new Image();\r\ngrassFull.src = \"./images/tiles/grass.png\";\r\n\r\nconst stone = new Image();\r\nstone.src = \"./images/tiles/stone_pink.png\"\r\n\r\nconst dirtLight = new Image();\r\ndirtLight.src = \"./images/tiles/dirt_light.png\"\r\n\r\nconst dirtDark = new Image();\r\ndirtDark.src = \"./images/tiles/dirt_dark.png\";\r\n\r\n// c.fillRect(20, 20, 20, 20)\r\n\r\nclass Board {\r\n\r\n\r\n  static map = [\r\n    [\"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\"],\r\n    [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n    [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n    [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n    [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n    [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n    [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n    [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n    [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n    [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n    [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n    [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n    [\"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\"]\r\n  ]\r\n\r\n  static timer = 0;\r\n  static intervalId = null;\r\n  static shrinkCounter = 0;\r\n  static gameover = false\r\n\r\n  static canvasCenterX = canvas.width / 2\r\n  static canvasCenterY = canvas.height / 2\r\n\r\n  // Map total Width and Height\r\n  static mapWidth = Board.map[0].length * Tile.size;\r\n  static mapHeight = Board.map.length * Tile.size;\r\n\r\n  // Map Start x and y\r\n  static gameFieldX = Board.canvasCenterX / 2 / 2 + 60; //300\r\n  static gameFieldY = Board.canvasCenterY / 4; //100\r\n\r\n  // Map End x and y\r\n  static gameFieldEndX = (Board.map[0].length * Tile.size) + (Tile.size * 3)\r\n  static gameFieldEndY = (Board.map.length * Tile.size) + (Tile.size * 2)\r\n\r\n  // Playfield Width and Height\r\n  static playFieldWidth = Board.mapWidth - Tile.size * 2;\r\n  static playFieldHeight = Board.mapHeight - Tile.size * 2;\r\n\r\n  // Playfield Start x and y\r\n  static playFieldStartX = Board.gameFieldX + Tile.size; // 350;\r\n  static playFieldStartY = Board.gameFieldY + Tile.size; // 150\r\n\r\n  constructor() {\r\n    // this.gameOver = false;\r\n    for (let i = 0; i < Board.map.length; i++) {\r\n      for (let j = 0; j < Board.map[i].length; j++) {\r\n        if (Board.map[i][j] === \" \") {\r\n          Board.map[i][j] = new Tile(\r\n            i, // row\r\n            j // col\r\n          );\r\n        } else {\r\n          Board.map[i][j] = new Boundary(\r\n            i, // row\r\n            j // col\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    const StartX = Board.gameFieldX;\r\n    const StartY = Board.gameFieldY;\r\n\r\n    Board.map.forEach((row) => {\r\n      // console.log(row)\r\n      row.forEach((tile) => {\r\n\r\n        // Col first, then row\r\n        if (tile instanceof Tile && tile.health === 3) {\r\n          c.shadowBlur = 10;\r\n          c.shadowColor = \"black\";\r\n          c.drawImage(grassFull, StartX + (tile.col * tile.size), StartY + (tile.row * tile.size), tile.size, tile.size)\r\n        } else if (tile instanceof Tile && tile.health === 2) {\r\n          c.shadowBlur = 10;\r\n          c.shadowColor = \"black\";\r\n          c.drawImage(dirtLight, StartX + (tile.col * tile.size), StartY + (tile.row * tile.size), tile.size, tile.size)\r\n        } else if (tile instanceof Tile && tile.health === 1) {\r\n          c.shadowBlur = 10;\r\n          c.shadowColor = \"black\";\r\n          c.drawImage(dirtDark, StartX + (tile.col * tile.size), StartY + (tile.row * tile.size), tile.size, tile.size)\r\n        } else if (tile instanceof Tile && tile.health === 0) {\r\n          c.globalAlpha = 0.0;\r\n          c.fillStyle = \"#ffebcd\"; // color of background\r\n          c.fillRect(StartX + (tile.col * tile.size), StartY + (tile.row * tile.size), tile.size, tile.size);\r\n          c.lineWidth = 2;\r\n          c.strokeStyle = \"black\";\r\n          c.strokeRect(StartX + (tile.col * tile.size), StartY + (tile.row * tile.size), tile.size, tile.size);\r\n          c.globalAlpha = 1;\r\n        } else if (tile instanceof Boundary) {\r\n          c.drawImage(stone, StartX + (tile.col * tile.size), StartY + (tile.row * tile.size), tile.size, tile.size)\r\n        }\r\n      });\r\n    });\r\n\r\n\r\n\r\n    // Draw red dot at game field (x, y)\r\n    // c.fillStyle = \"red\";\r\n    // c.beginPath();\r\n    // c.arc(Board.gameFieldX, Board.gameFieldY, 5, 0, Math.PI * 2);\r\n    // c.fill();\r\n\r\n    // // Draw red dot at play field (x, y)\r\n    // const circleplayFieldStartX = Board.playFieldStartX;\r\n    // const circleplayFieldStartY = Board.playFieldStartY;\r\n    // c.fillStyle = \"blue\";\r\n    // c.beginPath();\r\n    // c.arc(circleplayFieldStartX, circleplayFieldStartY, 5, 0, Math.PI * 2);\r\n    // c.fill();\r\n  }\r\n\r\n  static shrinkPlayField() {\r\n\r\n    Board.shrinkCounter++;\r\n\r\n    if (Board.shrinkCounter >= 6) {\r\n      Board.gameover = true;\r\n      return;\r\n    }\r\n\r\n    // Remove top row\r\n    Board.map.shift();\r\n\r\n    // Remove bottom row\r\n    Board.map.pop();\r\n\r\n    // Remove leftmost column for each row\r\n    for (let row of Board.map) {\r\n      row.shift();\r\n    }\r\n\r\n    // Remove rightmost column for each row\r\n    for (let row of Board.map) {\r\n      row.pop();\r\n    }\r\n\r\n    // Replace the top row with new Boundary instances\r\n    for (let col = 0; col < Board.map[0].length; col++) {\r\n      Board.map[0][col] = new Boundary(0, col);\r\n    }\r\n\r\n    // Replace the bottom row with new Boundary instances\r\n    let lastRow = Board.map.length - 1;\r\n    for (let col = 0; col < Board.map[lastRow].length; col++) {\r\n      Board.map[lastRow][col] = new Boundary(lastRow, col);\r\n    }\r\n\r\n    // Replace the leftmost column with new Boundary instances\r\n    for (let row = 0; row < Board.map.length; row++) {\r\n      Board.map[row][0] = new Boundary(row, 0);\r\n    }\r\n\r\n    // Replace the rightmost column with new Boundary instances\r\n    let lastCol = Board.map[0].length - 1;\r\n    for (let row = 0; row < Board.map.length; row++) {\r\n      Board.map[row][lastCol] = new Boundary(row, lastCol);\r\n    }\r\n\r\n    // We must update the rows and cols of the Tile instances\r\n    for (let i = 0; i < Board.map.length; i++) {\r\n      for (let j = 0; j < Board.map[i].length; j++) {\r\n        const tile = Board.map[i][j];\r\n        if (tile instanceof Tile) {\r\n          tile.row = i;\r\n          tile.col = j;\r\n        }\r\n      }\r\n    }\r\n\r\n    Board.mapWidth = Board.map[0].length * Tile.size;\r\n    Board.mapHeight = Board.map.length * Tile.size;\r\n\r\n    Board.gameFieldX += 50;\r\n    Board.gameFieldY += 50;\r\n\r\n    Board.gameFieldEndX -= 50;\r\n    Board.gamefieldEndY -= 50;\r\n\r\n    Board.playFieldStartX += 50;\r\n    Board.playFieldStartY += 50;\r\n\r\n    console.log(Board.gameover);\r\n\r\n  }\r\n\r\n  static startTimer() {\r\n    if (!Board.intervalId) {\r\n      Board.intervalId = setInterval(() => {\r\n        Board.timer += 1;\r\n        if (Board.timer % 5 === 0) {\r\n          Board.shrinkPlayField();\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  static stopTimer() {\r\n    if (Board.intervalId) {\r\n      clearInterval(Board.intervalId);\r\n      Board.intervalId = null;\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    Board.map = [\r\n      [\"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\"],\r\n      [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n      [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n      [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n      [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n      [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n      [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n      [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n      [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n      [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n      [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n      [\"-\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"-\"],\r\n      [\"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\"]\r\n    ]\r\n\r\n    Board.timer = 0;\r\n    Board.shrinkCounter = 0;\r\n    Board.gameover = false;\r\n\r\n    Board.canvasCenterX = canvas.width / 2\r\n    Board.canvasCenterY = canvas.height / 2\r\n\r\n    // Map total Width and Height\r\n    Board.mapWidth = Board.map[0].length * Tile.size;\r\n    Board.mapHeight = Board.map.length * Tile.size;\r\n\r\n    // Map Start x and y\r\n    Board.gameFieldX = Board.canvasCenterX / 2 / 2 + 60; //300\r\n    Board.gameFieldY = Board.canvasCenterY / 4; //100\r\n\r\n    // Map End x and y\r\n    Board.gameFieldEndX = (Board.map[0].length * Tile.size) + (Tile.size * 3)\r\n    Board.gameFieldEndY = (Board.map.length * Tile.size) + (Tile.size * 2)\r\n\r\n    // Playfield Width and Height\r\n    Board.playFieldWidth = Board.mapWidth - Tile.size * 2;\r\n    Board.playFieldHeight = Board.mapHeight - Tile.size * 2;\r\n\r\n    // Playfield Start x and y\r\n    Board.playFieldStartX = Board.gameFieldX + Tile.size; // 350;\r\n    Board.playFieldStartY = Board.gameFieldY + Tile.size; // 150\r\n\r\n\r\n  }\r\n}\r\n\r\nexport default Board;\r\n\r\n","import Board from \"./board.js\";\r\nimport Tile from \"./tile.js\";\r\nimport Boundary from \"./boundary.js\"\r\n\r\nconst canvas = document.getElementById(\"canvas\");\r\nconst c = canvas.getContext(\"2d\");\r\n\r\nconst shovelRight = new Image();\r\nshovelRight.src = \"./images/shovels/Shovel_Blue_Right.png\";\r\nconst shovelLeft = new Image();\r\nshovelLeft.src = \"./images/shovels/Shovel_Blue_Left.png\";\r\nconst shovelDown = new Image();\r\nshovelDown.src = \"./images/shovels/Shovel_Blue_Down.png\";\r\n\r\nclass Playertwo {\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.dx;\r\n    this.dy;\r\n    this.radius = 15;\r\n    this.row = Math.floor((this.y - Board.playFieldStartY) / Tile.size + 1); // row is y\r\n    this.col = Math.floor((this.x - Board.playFieldStartX) / Tile.size + 1); // col is x\r\n    this.currentPlace = this.getPlayerTile();\r\n    this.alive = true;\r\n    this.victory = false;\r\n    this.direction = 'left'\r\n    this.image;\r\n    this.lastKey = \"\";\r\n\r\n    window.addEventListener(\"keydown\", ({ key }) => {\r\n      // console.log(key);\r\n      var nowTile;\r\n      var nextTile;\r\n      switch (key) {\r\n        case \"ArrowUp\":\r\n\r\n          this.lastKey = \"ArrowUp\";\r\n          nowTile = this.getPlayerTile();\r\n          nextTile = this.getAnyTileXY(this.x, this.y - 50);\r\n          if (this.isTile(this.x, this.y - 50) && nextTile.occupied === false) {\r\n            nowTile.occupied = false;\r\n            nextTile.occupied = true;\r\n            this.y -= 50;\r\n            this.direction = \"up\";\r\n          }\r\n          if (this.alive && this.isDead()) {\r\n            this.alive = false;\r\n          }\r\n          break;\r\n        case \"ArrowLeft\":\r\n\r\n          this.lastKey = \"ArrowLeft\";\r\n          nowTile = this.getPlayerTile();\r\n          nextTile = this.getAnyTileXY(this.x - 50, this.y);\r\n          if (this.isTile(this.x - 50, this.y) && nextTile.occupied === false) {\r\n            nowTile.occupied = false;\r\n            nextTile.occupied = true;\r\n            this.x -= 50;\r\n            this.direction = \"left\";\r\n          }\r\n          if (this.alive && this.isDead()) {\r\n            this.alive = false;\r\n          }\r\n          break;\r\n        case \"ArrowDown\":\r\n\r\n          this.lastKey = \"ArrowDown\";\r\n          nowTile = this.getPlayerTile();\r\n          nextTile = this.getAnyTileXY(this.x, this.y + 50);\r\n          if (this.isTile(this.x, this.y + 50) && nextTile.occupied === false) {\r\n            nowTile.occupied = false;\r\n            nextTile.occupied = true;\r\n            this.y += 50;\r\n            this.direction = \"down\";\r\n          }\r\n          if (this.alive && this.isDead()) {\r\n            this.alive = false;\r\n          }\r\n          break;\r\n        case \"ArrowRight\":\r\n\r\n          this.lastKey = \"ArrowRight\";\r\n          nowTile = this.getPlayerTile();\r\n          nextTile = this.getAnyTileXY(this.x + 50, this.y);\r\n          if (this.isTile(this.x + 50, this.y) && nextTile.occupied === false) {\r\n            nowTile.occupied = false;\r\n            nextTile.occupied = true;\r\n            this.direction = \"right\";\r\n            this.x += 50;\r\n          }\r\n          if (this.alive && this.isDead()) {\r\n            this.alive = false;\r\n          }\r\n          break;\r\n        case \"Enter\":\r\n          switch (this.lastKey) {\r\n            case \"ArrowUp\":\r\n              if (this.isTile(this.x, this.y - 50)) {\r\n                this.breakTile(this.x, this.y - 50);\r\n              }\r\n              break;\r\n            case \"ArrowLeft\":\r\n              if (this.isTile(this.x - 50, this.y)) {\r\n                this.breakTile(this.x - 50, this.y);\r\n              }\r\n              break;\r\n            case \"ArrowDown\":\r\n              if (this.isTile(this.x, this.y + 50)) {\r\n                this.breakTile(this.x, this.y + 50);\r\n              }\r\n              break;\r\n            case \"ArrowRight\":\r\n              if (this.isTile(this.x + 50, this.y)) {\r\n                this.breakTile(this.x + 50, this.y);\r\n              }\r\n              break;\r\n          }\r\n          console.log(\"hello\");\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  draw() {\r\n    this.pickImage();\r\n    c.drawImage(this.image, this.x - 20, this.y - 20, 40, 40);\r\n  }\r\n\r\n  currentTile() {\r\n    let row = Math.floor((this.y - Board.playFieldStartY) / Tile.size + 1); // row is y\r\n    let col = Math.floor((this.x - Board.playFieldStartX) / Tile.size + 1); // col is x\r\n    // console.log([row, col]);\r\n    return [row, col];\r\n  }\r\n\r\n  getPlayerTile() {\r\n    let row = this.currentTile()[0];\r\n    let col = this.currentTile()[1];\r\n    // console.log([row, col]);\r\n    // console.log(Board.map[row][col]);\r\n    return Board.map[row][col];\r\n  }\r\n\r\n  getAnyTile(row, col) {\r\n    return Board.map[row][col];\r\n  }\r\n\r\n  getAnyTileXY(x, y) {\r\n    let tile = this.xyConvert(x, y);\r\n    let row = tile[0];\r\n    let col = tile[1];\r\n\r\n    return Board.map[row][col];\r\n  }\r\n\r\n  breakTile(x, y) {\r\n    let pos = this.xyConvert(x, y);\r\n    let row = pos[0];\r\n    let col = pos[1];\r\n\r\n    let tile = this.getAnyTile(row, col);\r\n    if (tile.health > 0) {\r\n      tile.health -= 1;\r\n      if (tile.health === 0) {\r\n        tile.visible = false;\r\n        if (tile.occupied) {\r\n          this.victory = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Tile existence logic (use for boundary detection)\r\n\r\n  isTile(x, y) {\r\n    let tile = this.xyConvert(x, y);\r\n    let row = tile[0];\r\n    let col = tile[1];\r\n\r\n    if (Board.map[row][col] instanceof Tile) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  xyConvert(x, y) {\r\n    let row = Math.floor((y - Board.playFieldStartY) / Tile.size + 1); // row is y\r\n    let col = Math.floor((x - Board.playFieldStartX) / Tile.size + 1);\r\n\r\n    return [row, col];\r\n  }\r\n\r\n  // Player dead logic\r\n\r\n  isDead() {\r\n    let tile = this.getPlayerTile();\r\n\r\n    // console.log(tile);\r\n    if (tile.health === 0) {\r\n      this.alive = false;\r\n    } else {\r\n      this.alive = true;\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.x = undefined;\r\n    this.y = undefined;\r\n    this.dx = undefined;\r\n    this.dy = undefined;\r\n    this.radius = undefined;\r\n    this.row = undefined;\r\n    this.col = undefined;\r\n    this.currentPlace = undefined;\r\n    this.alive = undefined;\r\n    this.victory = undefined;\r\n    this.lastkey = undefined;\r\n  }\r\n\r\n  pickImage() {\r\n\r\n    if (this.direction === 'right') {\r\n      this.image = shovelRight;\r\n    } else if (this.direction === 'left') {\r\n      this.image = shovelLeft;\r\n    } else if (this.direction === 'down') {\r\n      this.image = shovelDown;\r\n    } else {\r\n      this.image = shovelRight;\r\n    }\r\n\r\n  }\r\n\r\n  checkBoundary() {\r\n    const currentTile = this.getPlayerTile();\r\n    if (currentTile instanceof Boundary) {\r\n      this.alive = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Playertwo;\r\n","import Board from \"./board.js\";\r\nimport Tile from \"./tile.js\";\r\nimport Boundary from \"./boundary.js\"\r\n\r\nconst canvas = document.getElementById(\"canvas\");\r\nconst c = canvas.getContext(\"2d\");\r\n\r\nconst shovelRight = new Image();\r\nshovelRight.src = \"./images/shovels/Shovel_Yellow_Right.png\";\r\nconst shovelLeft = new Image();\r\nshovelLeft.src = \"./images/shovels/Shovel_Yellow_Left.png\";\r\nconst shovelDown = new Image();\r\nshovelDown.src = \"./images/shovels/Shovel_Yellow_Down.png\";\r\n\r\nclass AI {\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.alive = true;\r\n    this.radius = 15;\r\n    this.row = Math.floor((this.y - Board.playFieldStartY) / Tile.size + 1); // row is y\r\n    this.col = Math.floor((this.x - Board.playFieldStartX) / Tile.size + 1); // col is x\r\n    this.victory = false;\r\n    this.currentPlace = this.getPlayerTile();\r\n    this.lastKey = \"\";\r\n    this.canMove = true;\r\n    this.canBreak = true;\r\n    this.breakCount = 0;\r\n    this.direction = \"left\";\r\n    this.image;\r\n  }\r\n\r\n  moveAndBreak() {\r\n    this.makeMove();\r\n    this.makeMove();\r\n    this.break();\r\n    this.makeMove();\r\n  }\r\n\r\n  makeMove() {\r\n    if (!this.canMove) return false;\r\n\r\n    const directions = [\"north\", \"south\", \"east\", \"west\"];\r\n\r\n    let direction = directions[Math.floor(Math.random() * directions.length)];\r\n    var nowTile;\r\n    var nextTile;\r\n    switch (direction) {\r\n      case \"north\":\r\n        // this.keys.ArrowUp.pressed = true;\r\n        this.lastKey = \"north\";\r\n        nowTile = this.getPlayerTile();\r\n        nextTile = this.getAnyTileXY(this.x, this.y - 50);\r\n        if (\r\n          this.isTile(this.x, this.y - 50) &&\r\n          nextTile.occupied === false &&\r\n          nextTile.health > 0\r\n        ) {\r\n          nowTile.occupied = false;\r\n          nextTile.occupied = true;\r\n          this.y -= 50;\r\n          this.direction = \"up\";\r\n        }\r\n        if (this.alive && this.isDead()) {\r\n          this.alive = false;\r\n        }\r\n        break;\r\n      case \"west\":\r\n        // this.keys.ArrowLeft.pressed = true;\r\n        this.lastKey = \"west\";\r\n        nowTile = this.getPlayerTile();\r\n        nextTile = this.getAnyTileXY(this.x - 50, this.y);\r\n        if (\r\n          this.isTile(this.x - 50, this.y) &&\r\n          nextTile.occupied === false &&\r\n          nextTile.health > 0\r\n        ) {\r\n          nowTile.occupied = false;\r\n          nextTile.occupied = true;\r\n          this.x -= 50;\r\n          this.direction = \"left\";\r\n        }\r\n        if (this.alive && this.isDead()) {\r\n          this.alive = false;\r\n        }\r\n        break;\r\n      case \"south\":\r\n        // this.keys.ArrowDown.pressed = true;\r\n        this.lastKey = \"south\";\r\n        nowTile = this.getPlayerTile();\r\n        nextTile = this.getAnyTileXY(this.x, this.y + 50);\r\n        if (\r\n          this.isTile(this.x, this.y + 50) &&\r\n          nextTile.occupied === false &&\r\n          nextTile.health > 0\r\n        ) {\r\n          nowTile.occupied = false;\r\n          nextTile.occupied = true;\r\n          this.y += 50;\r\n          this.direction = \"down\"\r\n        }\r\n        if (this.alive && this.isDead()) {\r\n          this.alive = false;\r\n        }\r\n        break;\r\n      case \"east\":\r\n        // this.keys.ArrowRight.pressed = true;\r\n        this.lastKey = \"east\";\r\n        nowTile = this.getPlayerTile();\r\n        nextTile = this.getAnyTileXY(this.x + 50, this.y);\r\n        if (\r\n          this.isTile(this.x + 50, this.y) &&\r\n          nextTile.occupied === false &&\r\n          nextTile.health > 0\r\n        ) {\r\n          nowTile.occupied = false;\r\n          nextTile.occupied = true;\r\n          this.x += 50;\r\n          this.direction = \"right\"\r\n        }\r\n        if (this.alive && this.isDead()) {\r\n          this.alive = false;\r\n        }\r\n        break;\r\n    }\r\n    // throttle\r\n    this.canMove = false;\r\n    setTimeout(() => (this.canMove = true), 200);\r\n  }\r\n\r\n  break() {\r\n    if (!this.canBreak) return false;\r\n    switch (this.lastKey) {\r\n      case \"north\":\r\n        if (\r\n          this.isTile(this.x, this.y - 50) &&\r\n          this.getAnyTileXY(this.x, this.y - 50).health > 0\r\n        ) {\r\n          this.breakTile(this.x, this.y - 50);\r\n        }\r\n        break;\r\n      case \"west\":\r\n        if (\r\n          this.isTile(this.x - 50, this.y) &&\r\n          this.getAnyTileXY(this.x - 50, this.y).health > 0\r\n        ) {\r\n          this.breakTile(this.x - 50, this.y);\r\n        }\r\n        break;\r\n      case \"south\":\r\n        if (\r\n          this.isTile(this.x, this.y + 50) &&\r\n          this.getAnyTileXY(this.x, this.y + 50).health > 0\r\n        ) {\r\n          this.breakTile(this.x, this.y + 50);\r\n        }\r\n        break;\r\n      case \"east\":\r\n        if (\r\n          this.isTile(this.x + 50, this.y) &&\r\n          this.getAnyTileXY(this.x + 50, this.y).health > 0\r\n        ) {\r\n          this.breakTile(this.x + 50, this.y);\r\n        }\r\n        break;\r\n    }\r\n    this.canBreak = false;\r\n    setTimeout(() => (this.canBreak = true), 200);\r\n  }\r\n\r\n  draw() {\r\n    this.pickImage();\r\n    c.drawImage(this.image, this.x - 10, this.y - 20, 40, 40);\r\n  }\r\n\r\n  currentTile() {\r\n    let row = Math.floor((this.y - Board.playFieldStartY) / Tile.size + 1); // row is y\r\n    let col = Math.floor((this.x - Board.playFieldStartX) / Tile.size + 1); // col is x\r\n    return [row, col];\r\n  }\r\n\r\n  getPlayerTile() {\r\n    let row = this.currentTile()[0];\r\n    let col = this.currentTile()[1];\r\n    return Board.map[row][col];\r\n  }\r\n\r\n  getAnyTile(row, col) {\r\n    return Board.map[row][col];\r\n  }\r\n\r\n  getAnyTileXY(x, y) {\r\n    let tile = this.xyConvert(x, y);\r\n    let row = tile[0];\r\n    let col = tile[1];\r\n\r\n    return Board.map[row][col];\r\n  }\r\n\r\n  // breakTiles\r\n\r\n  breakTile(x, y) {\r\n    let pos = this.xyConvert(x, y);\r\n    let row = pos[0];\r\n    let col = pos[1];\r\n\r\n    let tile = this.getAnyTile(row, col);\r\n    if (tile.health > 0) {\r\n      tile.health -= 1;\r\n      if (tile.health === 0) {\r\n        tile.visible = false;\r\n        if (tile.occupied) {\r\n          this.victory = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Tile existence logic (use for boundary detection)\r\n\r\n  isTile(x, y) {\r\n    let tile = this.xyConvert(x, y);\r\n    let row = tile[0];\r\n    let col = tile[1];\r\n\r\n    if (Board.map[row][col] instanceof Tile) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  xyConvert(x, y) {\r\n    let row = Math.floor((y - Board.playFieldStartY) / Tile.size + 1); // row is y\r\n    let col = Math.floor((x - Board.playFieldStartX) / Tile.size + 1);\r\n\r\n    return [row, col];\r\n  }\r\n\r\n  // Player dead logic\r\n\r\n  isDead() {\r\n    let tile = this.getPlayerTile();\r\n\r\n    // console.log(tile);\r\n    if (tile.health === 0) {\r\n      this.alive = false;\r\n    } else {\r\n      this.alive = true;\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.x = undefined;\r\n    this.y = undefined;\r\n    this.dx = undefined;\r\n    this.dy = undefined;\r\n    this.radius = undefined;\r\n    this.row = undefined;\r\n    this.col = undefined;\r\n    this.currentPlace = undefined;\r\n    this.alive = undefined;\r\n    this.victory = undefined;\r\n    this.lastkey = undefined;\r\n  }\r\n\r\n  pickImage() {\r\n    if (this.direction === \"right\") {\r\n      this.image = shovelRight;\r\n    } else if (this.direction === \"left\") {\r\n      this.image = shovelLeft;\r\n    } else if (this.direction === \"down\") {\r\n      this.image = shovelDown;\r\n    } else {\r\n      this.image = shovelLeft;\r\n    }\r\n  }\r\n\r\n  checkBoundary() {\r\n    const currentTile = this.getPlayerTile();\r\n    if (currentTile instanceof Boundary) {\r\n      this.alive = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AI\r\n","import Board from \"./board.js\";\r\nimport Player from \"./player.js\";\r\nimport Playertwo from \"./playertwo.js\";\r\nimport AI from \"./ai.js\";\r\n\r\n\r\nconst canvas = document.getElementById(\"canvas\");\r\nconst c = canvas.getContext(\"2d\");\r\n\r\n//buttons\r\nconst spawnBtnPlayer = document.getElementById(\"spawn-btn-player\");\r\nconst spawnBtnAI = document.getElementById(\"spawn-btn-ai\")\r\nconst playAgain = document.getElementById(\"play-again\")\r\nconst winMessage = document.getElementById(\"win-message\")\r\n\r\nconst playerOneSpawnX = 285; // Board.gameFieldX + (Tile.size * 1.5), \r\nconst playerOneSpawnY = 175; // Board.gameFieldY + (Tile.size * 1.5)\r\nconst playerTwoSpawnX = 935; // Board.mapWidth + (Tile.size * 2.7)\r\nconst playerTwoSpawnY = 675; // Board.mapHeight + (Tile.size / 2)\r\nconst aiSpawnX = 825; // Board.mapWidth + Tile.size / 2\r\nconst aiSpawnY = 625; // Board.mapHeight - Tile.size / 2\r\n\r\nplayAgain.style.display = \"none\";\r\nwinMessage.style.display = \"none\";\r\n\r\nspawnBtnPlayer.addEventListener(\"click\", () => {\r\n  startPlayerGame();\r\n  clearButtons();\r\n})\r\n\r\nspawnBtnAI.addEventListener(\"click\", () => {\r\n  startAiGame();\r\n  clearButtons();\r\n})\r\n\r\nplayAgain.addEventListener('click', () => {\r\n  playerTwo instanceof AI ? startAiGame() : startPlayerGame();\r\n  clearButtons();\r\n})\r\n\r\n\r\nlet playerOne;\r\nlet playerTwo;\r\nlet board;\r\n\r\nfunction clearButtons() {\r\n  [playAgain, winMessage, spawnBtnPlayer, spawnBtnAI].forEach(el => el.style.display = \"none\");\r\n}\r\n\r\nfunction endGame(winner) {\r\n  if (winner == 'draw') {\r\n    winMessage.innerText = `It's a draw!`;\r\n  } else {\r\n    winMessage.innerText = `${winner} wins!`;\r\n  }\r\n  winMessage.style.display = \"block\";\r\n  spawnBtnPlayer.style.display = \"block\";\r\n  spawnBtnAI.style.display = \"block\";\r\n  playAgain.style.display = \"block\";\r\n  Board.stopTimer();\r\n}\r\n\r\nfunction localAnimate(player1, player2, board) {\r\n\r\n  window.requestAnimationFrame(() => {\r\n    c.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (Board.gameover && player1.alive && player2.alive) {\r\n      board.draw();\r\n      endGame('draw');\r\n      return;\r\n    }\r\n\r\n    board.draw();\r\n\r\n    player1.checkBoundary();\r\n    player2.checkBoundary();\r\n\r\n    player1.alive && player1.draw();\r\n    player2.alive && player2.draw();\r\n\r\n    if (!player1.alive && !player2.alive) {\r\n      endGame('draw');\r\n      return;\r\n    }\r\n\r\n    if (!player1.alive) {\r\n      player2.draw();\r\n      endGame('Blue');\r\n      return;\r\n    }\r\n\r\n    if (!player2.alive) {\r\n      player1.draw();\r\n      endGame('Red');\r\n      return;\r\n    }\r\n\r\n\r\n    localAnimate(player1, player2, board);\r\n  });\r\n}\r\n\r\nfunction startPlayerGame() {\r\n\r\n  board && board.reset();\r\n  playerOne && playerOne.reset();\r\n  playerTwo && playerTwo.reset();\r\n\r\n  board = undefined;\r\n  playerOne = undefined;\r\n  playerTwo = undefined;\r\n\r\n  board = new Board();\r\n  playerOne = new Player(playerOneSpawnX, playerOneSpawnY)\r\n  playerTwo = new Playertwo(playerTwoSpawnX, playerTwoSpawnY)\r\n  Board.startTimer();\r\n  playerOne.currentPlace.occupied = true;\r\n  playerTwo.currentPlace.occupied = true;\r\n  console.log(playerOne, playerTwo)\r\n\r\n  localAnimate(playerOne, playerTwo, board);\r\n}\r\n\r\n\r\nfunction aiAnimate(player1, ai, board) {\r\n  window.requestAnimationFrame(() => {\r\n    c.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (Board.gameover && player1.alive && ai.alive) {\r\n      board.draw();\r\n      endGame('draw');\r\n    }\r\n\r\n    board.draw();\r\n\r\n    player1.checkBoundary();\r\n    ai.checkBoundary();\r\n\r\n    player1.alive && player1.draw();\r\n    ai.alive && ai.draw();\r\n    ai.makeMove();\r\n    ai.makeMove();\r\n    ai.break();\r\n\r\n    if (!player1.alive && !ai.alive) {\r\n      endGame('draw');\r\n      return;\r\n    }\r\n\r\n    if (!player1.alive) {\r\n      ai.draw();\r\n      endGame('Rambo');\r\n      return;\r\n    }\r\n\r\n    if (!ai.alive) {\r\n      player1.draw();\r\n      endGame('Player');\r\n      return;\r\n    }\r\n\r\n\r\n    aiAnimate(player1, ai, board);\r\n  });\r\n}\r\n\r\nfunction startAiGame() {\r\n\r\n  board && board.reset();\r\n  playerOne && playerOne.reset();\r\n  playerTwo && playerTwo.reset();\r\n\r\n  board = undefined;\r\n  playerOne = undefined;\r\n  playerTwo = undefined;\r\n\r\n  board = new Board();\r\n  playerOne = new Player(playerOneSpawnX, playerOneSpawnY)\r\n  playerTwo = new AI(aiSpawnX, aiSpawnY)\r\n\r\n  Board.startTimer();\r\n\r\n  playerOne.currentPlace.occupied = true;\r\n  playerTwo.currentPlace.occupied = true;\r\n\r\n  aiAnimate(playerOne, playerTwo, board);\r\n}\r\n\r\nconsole.log(Board.mapWidth, Board.mapHeight, Board.gameFieldEndX, Board.gameFieldEndY)\r\n\r\n// Add this at the end of game.js\r\nfunction init() {\r\n  // Set up button event listeners\r\n  spawnBtnPlayer.addEventListener(\"click\", () => {\r\n    startPlayerGame();\r\n    clearButtons();\r\n  });\r\n\r\n  spawnBtnAI.addEventListener(\"click\", () => {\r\n    startAiGame();\r\n    clearButtons();\r\n  });\r\n\r\n  playAgain.addEventListener('click', () => {\r\n    playerTwo instanceof AI ? startAiGame() : startPlayerGame();\r\n    clearButtons();\r\n  });\r\n\r\n  // Hide buttons that should start hidden\r\n  playAgain.style.display = \"none\";\r\n  winMessage.style.display = \"none\";\r\n}\r\n\r\n// Export the init function\r\nexport default {\r\n  init\r\n};\r\n\r\n\r\n\r\n\r\n    // if (!board.gameover) {\r\n    //   board.draw();\r\n    // }\r\n\r\n    // if (player1 && ai) {\r\n    //   if (player1.alive && !ai.victory) {\r\n    //     player1.checkBoundary();\r\n    //     ai.checkBoundary();\r\n    //     player1.draw();\r\n    //   } else {\r\n    //     endGame(\"Rambo\")\r\n    //     return;\r\n    //   }\r\n    //   if (ai.alive && !player1.victory) {\r\n    //     player1.checkBoundary();\r\n    //     ai.checkBoundary();\r\n    //     ai.draw();\r\n    //     ai.makeMove();\r\n    //     ai.makeMove();\r\n    //     ai.break();\r\n    //     // ai.makeMove();\r\n    //   } else {\r\n    //     endGame(\"Player\")\r\n    //     return; //\r\n    //   }\r\n    // }\r\n\r\n    // player1.checkBoundary() && player1.alive && player1.draw();\r\n    // player2.checkBoundary() && player2.alive && player2.draw();\r\n\r\n    // if (!player1.alive) {\r\n    //   endGame('Blue');\r\n    //   return;\r\n    // }\r\n\r\n    // if (!player2.alive) {\r\n    //   endGame('Red');\r\n    //   return;\r\n    // }\r\n    \r\n    // if (player1 && player2)\r\n    // if (player1.alive && !player2.victory) {\r\n    //   player1.checkBoundary();\r\n    //   player2.checkBoundary();\r\n    //   player1.draw();\r\n    // } else {\r\n    //   endGame(\"Blue\")\r\n    //   return; // stop the animation\r\n    // }\r\n    // if (player2.alive && !player1.victory) {\r\n    //   player1.checkBoundary();\r\n    //   player2.checkBoundary();\r\n    //   player2.draw();\r\n    // } else {\r\n    //   endGame(\"Red\")\r\n    //   return; // stop the animation\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n","import Board from \"./scripts/board.js\"\r\nimport Game from \"./scripts/game.js\"\r\n\r\n// Game will initialize when the HTML loads and event listeners will be set up\r\nconsole.log(\"Game initialized\");"],"names":["Tile","static","constructor","row","col","this","size","health","visible","occupied","Boundary","c","document","getElementById","getContext","shovelRight","Image","src","shovelLeft","shovelDown","x","y","dx","dy","radius","Math","floor","Board","playFieldStartY","playFieldStartX","currentPlace","getPlayerTile","alive","victory","direction","image","lastKey","window","addEventListener","_ref","key","nowTile","nextTile","getAnyTileXY","isTile","isDead","breakTile","draw","pickImage","drawImage","currentTile","map","getAnyTile","tile","xyConvert","pos","reset","undefined","lastkey","checkBoundary","canvas","grassFull","stone","dirtLight","dirtDark","width","height","length","canvasCenterX","canvasCenterY","mapWidth","mapHeight","gameFieldX","gameFieldY","i","j","StartX","StartY","forEach","shadowBlur","shadowColor","globalAlpha","fillStyle","fillRect","lineWidth","strokeStyle","strokeRect","shrinkCounter","gameover","shift","pop","lastRow","lastCol","gameFieldEndX","gamefieldEndY","console","log","intervalId","setInterval","timer","shrinkPlayField","clearInterval","gameFieldEndY","playFieldWidth","playFieldHeight","canMove","canBreak","breakCount","moveAndBreak","makeMove","break","directions","random","setTimeout","spawnBtnPlayer","spawnBtnAI","playAgain","winMessage","playerOneSpawnX","playerOneSpawnY","playerTwoSpawnX","playerTwoSpawnY","aiSpawnX","aiSpawnY","playerOne","playerTwo","board","clearButtons","el","style","display","endGame","winner","innerText","stopTimer","localAnimate","player1","player2","requestAnimationFrame","clearRect","startPlayerGame","Player","Playertwo","startTimer","aiAnimate","ai","startAiGame","AI"],"sourceRoot":""}